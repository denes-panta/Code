# Libraries
library(plyr)
library(dplyr)
library(caret)
library(DMwR)
# Change workplace to the Grover directory
setwd('D:\\Code\\Code\\Samples\\Transactions - Fraud Detection')
# set seed
set.seed(1)
# Functions
# Model validation
validate <- function(model, dfTest){
vPredicted <- predict(model, dfTest)
dfError <- data.frame(
Preds = vPredicted ,
Valid = vLabels
)
result <- confusionMatrix(
data = dfError$Preds,
reference = dfError$Valid
)
return(result)
}
# Ensemble validation
ensemble <- function(dfEnsemble) {
dfEnsemble[] <- lapply(dfEnsemble, as.character)
dfEnsemble[dfEnsemble == 'good'] <- 0
dfEnsemble[dfEnsemble == 'bad'] <- 1
dfEnsemble[] <- lapply(dfEnsemble, as.integer)
dfEnsemble$kknn <- dfEnsemble$kknn * 2
dfEnsemble$svmlr <- dfEnsemble$svmlr * 1
dfEnsemble$proto <- dfEnsemble$proto * 1
dfEnsemble <- transform(
dfEnsemble,
final = round(rowSums(dfEnsemble) / (ncol(dfEnsemble) + 3))
)
dfEnsemble[dfEnsemble$final == 0, 'final'] <- 'good'
dfEnsemble[dfEnsemble$final == 1, 'final'] <- 'bad'
dfEnsemble$final <- as.factor(dfEnsemble$final)
vPredicted <- dfEnsemble$final
dfError <- data.frame(
Preds = vPredicted,
Valid = vLabels
)
result <- confusionMatrix(
data = dfError$Preds,
reference = dfError$Valid
)
return(result)
}
# Read in the files
dfTrain <- read.csv('resources\\training.csv', sep = ';', stringsAsFactors = F)
dfTest <- read.csv('resources\\validation.csv', sep = ';', stringsAsFactors = F)
# Exploration and missing value handling
str(dfTrain)
str(dfTest)
# Every variable seems to be character, which mean that there are missing values
# or some non-numerical labels mixed in with the numbers,
# and their meaning is unknown
# Let's assume that ? means missing data and everything else has information value
# Replace ? with NA
dfTrain[dfTrain == '?'] <- NA
dfTest[dfTest == '?'] <- NA
# Check for missing data
print(colSums(is.na(dfTrain)))
print(colSums(is.na(dfTest)))
# Variable X seems to be an ID variable, and contains no information value
# To simplify things, this will be used to distinguis between train and test
# in a merged file
dfTrain$X <- 'train'
dfTest$X <- 'test'
dfData <- rbind(dfTrain, dfTest)
# Since we are talking about financial transactions, check the distribution of
# the predicted variable for class imbalance
table(dfData$y)
dfData <- rename(
dfData,
Class = y
)
dfData$Class <- as.factor(dfData$Class)
# Since there is no information about the variables, and the reason behind the
# missing values, the missing values will be marked with a neutral category in
# the categorical variable
# There are too many missing values to delete these,
# and imputation would introduce noise if the missing values don't belong to
# either category
# X.0 is categorical with 2 categories and some missing values
table(dfData$x.0)
sum(is.na(dfData$x.0))
dfData[is.na(dfData$x.0), 'x.0'] <- '-1'
dfData$x.0 <- as.factor(dfData$x.0)
# X.1 is numerical with some missing values and decimal commas instead of dots
table(dfData$x.1)
sum(is.na(dfData$x.1))
dfData$x.1 <- gsub(",", ".", dfData$x.1)
dfData[is.na(dfData$x.1), 'x.1'] <- -1
dfData$x.1 <- as.numeric(dfData$x.1)
# X.2 is numerical with categories and no missing values
# Create a new variable to contain the labels
# Set the labels to -1 in the x.2 and everything else but the labels in x.2_cat
table(dfData$x.2)
sum(is.na(dfData$x.2))
dfData$x.2_cat <- -1
dfData$x.2_cat[dfData$x.2 == 'f'] <- 'f'
dfData$x.2_cat[dfData$x.2 == 't'] <- 't'
dfData$x.2_cat <- as.factor(dfData$x.2_cat)
dfData$x.2 <- mapvalues(dfData$x.2, c('t', 'f'), c('-1', '-1'))
dfData$x.2 <- as.numeric(dfData$x.2)
# X.3 - x.6 are categorical with some missing values
# X.3
table(dfData$x.3)
sum(is.na(dfData$x.3))
dfData[is.na(dfData$x.3), 'x.3'] <- '-1'
dfData$x.3 <- as.factor(dfData$x.3)
# X.4
table(dfData$x.4)
sum(is.na(dfData$x.4))
dfData[is.na(dfData$x.4), 'x.4'] <- '-1'
dfData$x.4 <- as.factor(dfData$x.4)
# X.5
table(dfData$x.5)
sum(is.na(dfData$x.5))
dfData[is.na(dfData$x.5), 'x.5'] <- '-1'
dfData$x.5 <- as.factor(dfData$x.5)
# X.6
table(dfData$x.6)
sum(is.na(dfData$x.6))
dfData[is.na(dfData$x.6), 'x.6'] <- '-1'
dfData$x.6 <- as.factor(dfData$x.6)
# x.7 is numerical with categories and no missing values
table(dfData$x.7)
sum(is.na(dfData$x.7))
dfData$x.7_cat <- -1
dfData$x.7_cat[dfData$x.7 == 'f'] <- 'f'
dfData$x.7_cat[dfData$x.7 == 't'] <- 't'
dfData$x.7_cat <- as.factor(dfData$x.7_cat)
dfData$x.7 <- mapvalues(dfData$x.7, c('t', 'f'), c('-1', '-1'))
dfData$x.7 <- as.numeric(dfData$x.7)
# x.8 and x.9 are categorical with no misssing values
table(dfData$x.8)
sum(is.na(dfData$x.8))
dfData$x.8 <- as.factor(dfData$x.8)
table(dfData$x.9)
sum(is.na(dfData$x.9))
dfData$x.9 <- as.factor(dfData$x.9)
# x.10 seems to be categorical, with numbers representing the categories
# and with no missing values
table(dfData$x.10)
sum(is.na(dfData$x.10))
dfData$x.10 <- as.factor(dfData$x.10)
# x.11 is categorical with no missing values
table(dfData$x.11)
sum(is.na(dfData$x.11))
dfData$x.11 <- as.factor(dfData$x.11)
# x.12 is categorical with no missing values
table(dfData$x.12)
sum(is.na(dfData$x.12))
dfData$x.12 <- as.factor(dfData$x.12)
# x.13 is numerical with labels and some missing values
table(dfData$x.13)
sum(is.na(dfData$x.13))
dfData$x.13_cat <- -1
dfData$x.13_cat[dfData$x.13 == 'f'] <- 'f'
dfData$x.13_cat <- as.factor(dfData$x.13_cat)
dfData[is.na(dfData$x.13), 'x.13'] <- '-1'
dfData$x.13 <- mapvalues(dfData$x.13, c('f'), c('-1'))
dfData$x.13 <- as.numeric(dfData$x.13)
# x.14 is numerical with labels and no missing values
table(dfData$x.14)
sum(is.na(dfData$x.14))
dfData$x.14_cat <- -1
dfData$x.14_cat[dfData$x.14 == 'f'] <- 'f'
dfData$x.14_cat[dfData$x.14 == 't'] <- 't'
dfData$x.14_cat <- as.factor(dfData$x.14_cat)
dfData$x.14 <- mapvalues(dfData$x.14, c('t', 'f'), c('-1', '-1'))
dfData$x.14 <- as.numeric(dfData$x.14)
# x.20 is categorical with some missing values
table(dfData$x.20)
sum(is.na(dfData$x.20))
dfData[is.na(dfData$x.20), 'x.20'] <- '-1'
dfData$x.20 <- as.factor(dfData$x.20)
# x.17 and x.18 are numerical with some missing values and decimal commas
# x.17
table(dfData$x.17)
sum(is.na(dfData$x.17))
dfData[is.na(dfData$x.17), 'x.17'] <- -1
dfData$x.17 <- gsub(",", ".", dfData$x.17)
dfData$x.17 <- as.numeric(dfData$x.17)
# x.18
table(dfData$x.18)
sum(is.na(dfData$x.18))
dfData[is.na(dfData$x.18), 'x.18'] <- -1
dfData$x.18 <- gsub(",", ".", dfData$x.18)
dfData$x.18 <- as.numeric(dfData$x.18)
str(dfData)
# x.19 is numberical with labels and some missing values
table(dfData$x.19)
sum(is.na(dfData$x.19))
dfData$x.19_cat <- -1
dfData$x.19_cat[dfData$x.19 == 'f'] <- 'f'
dfData$x.19_cat[dfData$x.19 == 't'] <- 't'
dfData$x.19_cat <- as.factor(dfData$x.19_cat)
dfData$x.19 <- mapvalues(dfData$x.19, c('f'), c('-1'))
dfData[is.na(dfData$x.19), 'x.19'] <- '-1'
dfData$x.19 <- as.numeric(dfData$x.19)
# x.16 is categorical with some missing values
table(dfData$x.16)
sum(is.na(dfData$x.16))
dfData[is.na(dfData$x.16), 'x.16'] <- '-1'
dfData$x.16 <- as.factor(dfData$x.16)
# check variables for zero variance
nearZeroVar(dfData, saveMetrics = T)
# Separate the training and testing datasets
dfTrain <- dfData[dfData$X == 'train', ]
dfTrain$X <- NULL
dfTest <- dfData[dfData$X == 'test', ]
dfTest$X <- NULL
# Extract the test class variable into a separate vector
vLabels <- dfTest$Class
dfTest$Class <- NULL
# Libraries
library(plyr)
library(dplyr)
library(caret)
library(DMwR)
# Change workplace to the Grover directory
setwd('D:\\Code\\Code\\Samples\\Transactions - Fraud Detection')
# set seed
set.seed(1)
# Functions
# Model validation
validate <- function(model, dfTest){
vPredicted <- predict(model, dfTest)
dfError <- data.frame(
Preds = vPredicted ,
Valid = vLabels
)
result <- confusionMatrix(
data = dfError$Preds,
reference = dfError$Valid
)
return(result)
}
# Ensemble validation
ensemble <- function(dfEnsemble) {
dfEnsemble[] <- lapply(dfEnsemble, as.character)
dfEnsemble[dfEnsemble == 'good'] <- 0
dfEnsemble[dfEnsemble == 'bad'] <- 1
dfEnsemble[] <- lapply(dfEnsemble, as.integer)
dfEnsemble$kknn <- dfEnsemble$kknn * 2
dfEnsemble$svmlr <- dfEnsemble$svmlr * 1
dfEnsemble$proto <- dfEnsemble$proto * 1
dfEnsemble <- transform(
dfEnsemble,
final = round(rowSums(dfEnsemble) / (ncol(dfEnsemble) + 3))
)
dfEnsemble[dfEnsemble$final == 0, 'final'] <- 'good'
dfEnsemble[dfEnsemble$final == 1, 'final'] <- 'bad'
dfEnsemble$final <- as.factor(dfEnsemble$final)
vPredicted <- dfEnsemble$final
dfError <- data.frame(
Preds = vPredicted,
Valid = vLabels
)
result <- confusionMatrix(
data = dfError$Preds,
reference = dfError$Valid
)
return(result)
}
# Read in the files
dfTrain <- read.csv('resources\\training.csv', sep = ';', stringsAsFactors = F)
dfTest <- read.csv('resources\\validation.csv', sep = ';', stringsAsFactors = F)
# Exploration and missing value handling
str(dfTrain)
str(dfTest)
# Every variable seems to be character, which mean that there are missing values
# or some non-numerical labels mixed in with the numbers,
# and their meaning is unknown
# Let's assume that ? means missing data and everything else has information value
# Replace ? with NA
dfTrain[dfTrain == '?'] <- NA
dfTest[dfTest == '?'] <- NA
# Check for missing data
print(colSums(is.na(dfTrain)))
print(colSums(is.na(dfTest)))
# Variable X seems to be an ID variable, and contains no information value
# To simplify things, this will be used to distinguis between train and test
# in a merged file
dfTrain$X <- 'train'
dfTest$X <- 'test'
dfData <- rbind(dfTrain, dfTest)
# Since we are talking about financial transactions, check the distribution of
# the predicted variable for class imbalance
table(dfData$y)
dfData <- rename(
dfData,
Class = y
)
dfData$Class <- as.factor(dfData$Class)
# Since there is no information about the variables, and the reason behind the
# missing values, the missing values will be marked with a neutral category in
# the categorical variable
# There are too many missing values to delete these,
# and imputation would introduce noise if the missing values don't belong to
# either category
# X.0 is categorical with 2 categories and some missing values
table(dfData$x.0)
sum(is.na(dfData$x.0))
dfData[is.na(dfData$x.0), 'x.0'] <- '-1'
dfData$x.0 <- as.factor(dfData$x.0)
# X.1 is numerical with some missing values and decimal commas instead of dots
table(dfData$x.1)
sum(is.na(dfData$x.1))
dfData$x.1 <- gsub(",", ".", dfData$x.1)
dfData[is.na(dfData$x.1), 'x.1'] <- -1
dfData$x.1 <- as.numeric(dfData$x.1)
# X.2 is numerical with categories and no missing values
# Create a new variable to contain the labels
# Set the labels to -1 in the x.2 and everything else but the labels in x.2_cat
table(dfData$x.2)
sum(is.na(dfData$x.2))
dfData$x.2_cat <- -1
dfData$x.2_cat[dfData$x.2 == 'f'] <- 'f'
dfData$x.2_cat[dfData$x.2 == 't'] <- 't'
dfData$x.2_cat <- as.factor(dfData$x.2_cat)
dfData$x.2 <- mapvalues(dfData$x.2, c('t', 'f'), c('-1', '-1'))
dfData$x.2 <- as.numeric(dfData$x.2)
# X.3 - x.6 are categorical with some missing values
# X.3
table(dfData$x.3)
sum(is.na(dfData$x.3))
dfData[is.na(dfData$x.3), 'x.3'] <- '-1'
dfData$x.3 <- as.factor(dfData$x.3)
# X.4
table(dfData$x.4)
sum(is.na(dfData$x.4))
dfData[is.na(dfData$x.4), 'x.4'] <- '-1'
dfData$x.4 <- as.factor(dfData$x.4)
# X.5
table(dfData$x.5)
sum(is.na(dfData$x.5))
dfData[is.na(dfData$x.5), 'x.5'] <- '-1'
dfData$x.5 <- as.factor(dfData$x.5)
# X.6
table(dfData$x.6)
sum(is.na(dfData$x.6))
dfData[is.na(dfData$x.6), 'x.6'] <- '-1'
dfData$x.6 <- as.factor(dfData$x.6)
# x.7 is numerical with categories and no missing values
table(dfData$x.7)
sum(is.na(dfData$x.7))
dfData$x.7_cat <- -1
dfData$x.7_cat[dfData$x.7 == 'f'] <- 'f'
dfData$x.7_cat[dfData$x.7 == 't'] <- 't'
dfData$x.7_cat <- as.factor(dfData$x.7_cat)
dfData$x.7 <- mapvalues(dfData$x.7, c('t', 'f'), c('-1', '-1'))
dfData$x.7 <- as.numeric(dfData$x.7)
# x.8 and x.9 are categorical with no misssing values
table(dfData$x.8)
sum(is.na(dfData$x.8))
dfData$x.8 <- as.factor(dfData$x.8)
table(dfData$x.9)
sum(is.na(dfData$x.9))
dfData$x.9 <- as.factor(dfData$x.9)
# x.10 seems to be categorical, with numbers representing the categories
# and with no missing values
table(dfData$x.10)
sum(is.na(dfData$x.10))
dfData$x.10 <- as.factor(dfData$x.10)
# x.11 is categorical with no missing values
table(dfData$x.11)
sum(is.na(dfData$x.11))
dfData$x.11 <- as.factor(dfData$x.11)
# x.12 is categorical with no missing values
table(dfData$x.12)
sum(is.na(dfData$x.12))
dfData$x.12 <- as.factor(dfData$x.12)
# x.13 is numerical with labels and some missing values
table(dfData$x.13)
sum(is.na(dfData$x.13))
dfData$x.13_cat <- -1
dfData$x.13_cat[dfData$x.13 == 'f'] <- 'f'
dfData$x.13_cat <- as.factor(dfData$x.13_cat)
dfData[is.na(dfData$x.13), 'x.13'] <- '-1'
dfData$x.13 <- mapvalues(dfData$x.13, c('f'), c('-1'))
dfData$x.13 <- as.numeric(dfData$x.13)
# x.14 is numerical with labels and no missing values
table(dfData$x.14)
sum(is.na(dfData$x.14))
dfData$x.14_cat <- -1
dfData$x.14_cat[dfData$x.14 == 'f'] <- 'f'
dfData$x.14_cat[dfData$x.14 == 't'] <- 't'
dfData$x.14_cat <- as.factor(dfData$x.14_cat)
dfData$x.14 <- mapvalues(dfData$x.14, c('t', 'f'), c('-1', '-1'))
dfData$x.14 <- as.numeric(dfData$x.14)
# x.20 is categorical with some missing values
table(dfData$x.20)
sum(is.na(dfData$x.20))
dfData[is.na(dfData$x.20), 'x.20'] <- '-1'
dfData$x.20 <- as.factor(dfData$x.20)
# x.17 and x.18 are numerical with some missing values and decimal commas
# x.17
table(dfData$x.17)
sum(is.na(dfData$x.17))
dfData[is.na(dfData$x.17), 'x.17'] <- -1
dfData$x.17 <- gsub(",", ".", dfData$x.17)
dfData$x.17 <- as.numeric(dfData$x.17)
# x.18
table(dfData$x.18)
sum(is.na(dfData$x.18))
dfData[is.na(dfData$x.18), 'x.18'] <- -1
dfData$x.18 <- gsub(",", ".", dfData$x.18)
dfData$x.18 <- as.numeric(dfData$x.18)
str(dfData)
# x.19 is numberical with labels and some missing values
table(dfData$x.19)
sum(is.na(dfData$x.19))
dfData$x.19_cat <- -1
dfData$x.19_cat[dfData$x.19 == 'f'] <- 'f'
dfData$x.19_cat[dfData$x.19 == 't'] <- 't'
dfData$x.19_cat <- as.factor(dfData$x.19_cat)
dfData$x.19 <- mapvalues(dfData$x.19, c('f'), c('-1'))
dfData[is.na(dfData$x.19), 'x.19'] <- '-1'
dfData$x.19 <- as.numeric(dfData$x.19)
# x.16 is categorical with some missing values
table(dfData$x.16)
sum(is.na(dfData$x.16))
dfData[is.na(dfData$x.16), 'x.16'] <- '-1'
dfData$x.16 <- as.factor(dfData$x.16)
# check variables for zero variance
nearZeroVar(dfData, saveMetrics = T)
# Separate the training and testing datasets
dfTrain <- dfData[dfData$X == 'train', ]
dfTrain$X <- NULL
dfTest <- dfData[dfData$X == 'test', ]
dfTest$X <- NULL
View(dfData)
